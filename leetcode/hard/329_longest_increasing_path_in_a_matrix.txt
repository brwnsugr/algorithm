class Solution {
public:
    
int dfs(int m, int n, int y, int x, vector<vector<int>>& matrix, vector<vector<int>>& cache){
    if(cache[y][x] != 0) return cache[y][x];
    int count = 1;
    const int dy[] = {-1,1,0,0};
    const int dx[] = {0,0,-1,1};
    for(int k = 0; k < 4; k++){
        int next_y = y + dy[k];
        int next_x = x + dx[k];
        if(next_y >= 0 && next_y < m
            && next_x >= 0 && next_x < n
            && matrix[next_y][next_x] > matrix[y][x]){
            int len = 1 + dfs(m, n, next_y, next_x, matrix, cache);
            count = max(len, count);
        }
    }
    cache[y][x] = count;
    return count;
}

int longestIncreasingPath(vector<vector<int>>& matrix) {
    int answer = 0;
    if(matrix.size()==0) return 0;
    int m = matrix.size(), n = matrix[0].size();
    int length = matrix.size();
    vector<vector<int>> cache(m, vector<int>(n,0));
    for(int i = 0; i < m; i++){
        for(int j = 0; j < n; j++){
            int tmp = dfs(m, n,i,j,matrix,cache);
            if(tmp > answer){
                answer = tmp;
            }
        }
    }
    return answer;
}
    
};